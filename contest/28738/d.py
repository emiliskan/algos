"""
https://contest.yandex.ru/contest/28738/problems/D/

В атриуме нового корпуса ФНК урбанисты установили модные гранитные лавочки (на которых холодно сидеть зимой и жарко летом). Лавочка устроена следующим образом: несколько одинаковых кубических гранитных блоков ставятся в ряд, а на них кладется гранитная плита.
При этом блоки располагаются так, чтобы плита не падала: для этого достаточно, чтобы и слева, и справа от центра плиты был хотя бы один гранитный блок или его часть (в частности, если центр плиты приходится на середину какого-нибудь блока, то и слева, и справа от центра плиты находится часть блока, и плита не падает).
На ФНК много певокурсников (но это только пока не произошли отчисления за списывания на курсе ОиМП) и им не хватает стульев в аудиториях.
Студенты обнаружили, что блоки можно использовать в аудитории в качестве сиденья.
Можно по одному вытаскивать блоки, находящиеся с краю (как слева, так и справа).
Они хотят вытащить из-под лавочки как можно больше блоков так, чтобы она при этом не упала (передвигать оставшиеся блоки нельзя). Определите, какие блоки они должны оставить.
"""

import sys

PLATE_WIDTH = 1


def calc(length: int, n: int, plates: list[int]):
    should_stay = []

    central = length / 2
    central_plate = central - (PLATE_WIDTH / 2)

    for i in range(n):

        if plates[i] == central_plate:
            should_stay.clear()
            should_stay.append(plates[i])
            return should_stay

        if plates[i] > central_plate:
            should_stay.append(plates[i-1])
            should_stay.append(plates[i])
            break

    return should_stay


# first_row = sys.stdin.readline().split()
# length = int(first_row[0])
# n = int(first_row[1])
# plates = list(map(int, sys.stdin.readline().split()))
# for res in calc(length, n, plates):
#     print(res)

assert calc(5, 2, [0, 2]) == [2]
assert calc(13, 4, [1, 4, 8, 11]) == [4, 8]
assert calc(14, 6, [1, 6, 8, 11, 12, 13]) == [6, 8]
assert calc(13, 5, [6, 8, 11, 12, 13]) == [6]
assert calc(13, 5, [5, 8, 11, 12, 13]) == [5, 8]
assert calc(14, 3, [1, 6, 13]) == [6, 13]
